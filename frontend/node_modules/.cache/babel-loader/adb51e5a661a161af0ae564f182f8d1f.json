{"ast":null,"code":"var fs = require('fs');\n\nvar polyfills = require('./polyfills.js');\n\nvar legacy = require('./legacy-streams.js');\n\nvar clone = require('./clone.js');\n\nvar util = require('util');\n/* istanbul ignore next - node 0.x polyfill */\n\n\nvar gracefulQueue;\nvar previousSymbol;\n/* istanbul ignore else - node 0.x polyfill */\n\nif (typeof Symbol === 'function' && typeof Symbol[\"for\"] === 'function') {\n  gracefulQueue = Symbol[\"for\"]('graceful-fs.queue'); // This is used in testing by future versions\n\n  previousSymbol = Symbol[\"for\"]('graceful-fs.previous');\n} else {\n  gracefulQueue = '___graceful-fs.queue';\n  previousSymbol = '___graceful-fs.previous';\n}\n\nfunction noop() {}\n\nfunction publishQueue(context, queue) {\n  Object.defineProperty(context, gracefulQueue, {\n    get: function get() {\n      return queue;\n    }\n  });\n}\n\nvar debug = noop;\nif (util.debuglog) debug = util.debuglog('gfs4');else if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) debug = function debug() {\n  var m = util.format.apply(util, arguments);\n  m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ');\n  console.error(m);\n}; // Once time initialization\n\nif (!fs[gracefulQueue]) {\n  // This queue can be shared by multiple loaded instances\n  var queue = global[gracefulQueue] || [];\n  publishQueue(fs, queue); // Patch fs.close/closeSync to shared queue version, because we need\n  // to retry() whenever a close happens *anywhere* in the program.\n  // This is essential when multiple graceful-fs instances are\n  // in play at the same time.\n\n  fs.close = function (fs$close) {\n    function close(fd, cb) {\n      return fs$close.call(fs, fd, function (err) {\n        // This function uses the graceful-fs shared queue\n        if (!err) {\n          resetQueue();\n        }\n\n        if (typeof cb === 'function') cb.apply(this, arguments);\n      });\n    }\n\n    Object.defineProperty(close, previousSymbol, {\n      value: fs$close\n    });\n    return close;\n  }(fs.close);\n\n  fs.closeSync = function (fs$closeSync) {\n    function closeSync(fd) {\n      // This function uses the graceful-fs shared queue\n      fs$closeSync.apply(fs, arguments);\n      resetQueue();\n    }\n\n    Object.defineProperty(closeSync, previousSymbol, {\n      value: fs$closeSync\n    });\n    return closeSync;\n  }(fs.closeSync);\n\n  if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n    process.on('exit', function () {\n      debug(fs[gracefulQueue]);\n\n      require('assert').equal(fs[gracefulQueue].length, 0);\n    });\n  }\n}\n\nif (!global[gracefulQueue]) {\n  publishQueue(global, fs[gracefulQueue]);\n}\n\nmodule.exports = patch(clone(fs));\n\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n  module.exports = patch(fs);\n  fs.__patched = true;\n}\n\nfunction patch(fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs);\n  fs.gracefulify = patch;\n  fs.createReadStream = createReadStream;\n  fs.createWriteStream = createWriteStream;\n  var fs$readFile = fs.readFile;\n  fs.readFile = readFile;\n\n  function readFile(path, options, cb) {\n    if (typeof options === 'function') cb = options, options = null;\n    return go$readFile(path, options, cb);\n\n    function go$readFile(path, options, cb, startTime) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n        }\n      });\n    }\n  }\n\n  var fs$writeFile = fs.writeFile;\n  fs.writeFile = writeFile;\n\n  function writeFile(path, data, options, cb) {\n    if (typeof options === 'function') cb = options, options = null;\n    return go$writeFile(path, data, options, cb);\n\n    function go$writeFile(path, data, options, cb, startTime) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n        }\n      });\n    }\n  }\n\n  var fs$appendFile = fs.appendFile;\n  if (fs$appendFile) fs.appendFile = appendFile;\n\n  function appendFile(path, data, options, cb) {\n    if (typeof options === 'function') cb = options, options = null;\n    return go$appendFile(path, data, options, cb);\n\n    function go$appendFile(path, data, options, cb, startTime) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n        }\n      });\n    }\n  }\n\n  var fs$copyFile = fs.copyFile;\n  if (fs$copyFile) fs.copyFile = copyFile;\n\n  function copyFile(src, dest, flags, cb) {\n    if (typeof flags === 'function') {\n      cb = flags;\n      flags = 0;\n    }\n\n    return go$copyFile(src, dest, flags, cb);\n\n    function go$copyFile(src, dest, flags, cb, startTime) {\n      return fs$copyFile(src, dest, flags, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n        }\n      });\n    }\n  }\n\n  var fs$readdir = fs.readdir;\n  fs.readdir = readdir;\n\n  function readdir(path, options, cb) {\n    if (typeof options === 'function') cb = options, options = null;\n    return go$readdir(path, options, cb);\n\n    function go$readdir(path, options, cb, startTime) {\n      return fs$readdir(path, options, function (err, files) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readdir, [path, options, cb], err, startTime || Date.now(), Date.now()]);else {\n          if (files && files.sort) files.sort();\n          if (typeof cb === 'function') cb.call(this, err, files);\n        }\n      });\n    }\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs);\n    ReadStream = legStreams.ReadStream;\n    WriteStream = legStreams.WriteStream;\n  }\n\n  var fs$ReadStream = fs.ReadStream;\n\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype);\n    ReadStream.prototype.open = ReadStream$open;\n  }\n\n  var fs$WriteStream = fs.WriteStream;\n\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype);\n    WriteStream.prototype.open = WriteStream$open;\n  }\n\n  Object.defineProperty(fs, 'ReadStream', {\n    get: function get() {\n      return ReadStream;\n    },\n    set: function set(val) {\n      ReadStream = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(fs, 'WriteStream', {\n    get: function get() {\n      return WriteStream;\n    },\n    set: function set(val) {\n      WriteStream = val;\n    },\n    enumerable: true,\n    configurable: true\n  }); // legacy names\n\n  var FileReadStream = ReadStream;\n  Object.defineProperty(fs, 'FileReadStream', {\n    get: function get() {\n      return FileReadStream;\n    },\n    set: function set(val) {\n      FileReadStream = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  var FileWriteStream = WriteStream;\n  Object.defineProperty(fs, 'FileWriteStream', {\n    get: function get() {\n      return FileWriteStream;\n    },\n    set: function set(val) {\n      FileWriteStream = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  function ReadStream(path, options) {\n    if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);\n  }\n\n  function ReadStream$open() {\n    var that = this;\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose) that.destroy();\n        that.emit('error', err);\n      } else {\n        that.fd = fd;\n        that.emit('open', fd);\n        that.read();\n      }\n    });\n  }\n\n  function WriteStream(path, options) {\n    if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);\n  }\n\n  function WriteStream$open() {\n    var that = this;\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy();\n        that.emit('error', err);\n      } else {\n        that.fd = fd;\n        that.emit('open', fd);\n      }\n    });\n  }\n\n  function createReadStream(path, options) {\n    return new fs.ReadStream(path, options);\n  }\n\n  function createWriteStream(path, options) {\n    return new fs.WriteStream(path, options);\n  }\n\n  var fs$open = fs.open;\n  fs.open = open;\n\n  function open(path, flags, mode, cb) {\n    if (typeof mode === 'function') cb = mode, mode = null;\n    return go$open(path, flags, mode, cb);\n\n    function go$open(path, flags, mode, cb, startTime) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()]);else {\n          if (typeof cb === 'function') cb.apply(this, arguments);\n        }\n      });\n    }\n  }\n\n  return fs;\n}\n\nfunction enqueue(elem) {\n  debug('ENQUEUE', elem[0].name, elem[1]);\n  fs[gracefulQueue].push(elem);\n  retry();\n} // keep track of the timeout between retry() calls\n\n\nvar retryTimer; // reset the startTime and lastTime to now\n// this resets the start of the 60 second overall timeout as well as the\n// delay between attempts so that we'll retry these jobs sooner\n\nfunction resetQueue() {\n  var now = Date.now();\n\n  for (var i = 0; i < fs[gracefulQueue].length; ++i) {\n    // entries that are only a length of 2 are from an older version, don't\n    // bother modifying those since they'll be retried anyway.\n    if (fs[gracefulQueue][i].length > 2) {\n      fs[gracefulQueue][i][3] = now; // startTime\n\n      fs[gracefulQueue][i][4] = now; // lastTime\n    }\n  } // call retry to make sure we're actively processing the queue\n\n\n  retry();\n}\n\nfunction retry() {\n  // clear the timer and remove it to help prevent unintended concurrency\n  clearTimeout(retryTimer);\n  retryTimer = undefined;\n  if (fs[gracefulQueue].length === 0) return;\n  var elem = fs[gracefulQueue].shift();\n  var fn = elem[0];\n  var args = elem[1]; // these items may be unset if they were added by an older graceful-fs\n\n  var err = elem[2];\n  var startTime = elem[3];\n  var lastTime = elem[4]; // if we don't have a startTime we have no way of knowing if we've waited\n  // long enough, so go ahead and retry this item now\n\n  if (startTime === undefined) {\n    debug('RETRY', fn.name, args);\n    fn.apply(null, args);\n  } else if (Date.now() - startTime >= 60000) {\n    // it's been more than 60 seconds total, bail now\n    debug('TIMEOUT', fn.name, args);\n    var cb = args.pop();\n    if (typeof cb === 'function') cb.call(null, err);\n  } else {\n    // the amount of time between the last attempt and right now\n    var sinceAttempt = Date.now() - lastTime; // the amount of time between when we first tried, and when we last tried\n    // rounded up to at least 1\n\n    var sinceStart = Math.max(lastTime - startTime, 1); // backoff. wait longer than the total time we've been retrying, but only\n    // up to a maximum of 100ms\n\n    var desiredDelay = Math.min(sinceStart * 1.2, 100); // it's been long enough since the last retry, do it again\n\n    if (sinceAttempt >= desiredDelay) {\n      debug('RETRY', fn.name, args);\n      fn.apply(null, args.concat([startTime]));\n    } else {\n      // if we can't do this job yet, push it to the end of the queue\n      // and let the next iteration check again\n      fs[gracefulQueue].push(elem);\n    }\n  } // schedule our next run if one isn't already scheduled\n\n\n  if (retryTimer === undefined) {\n    retryTimer = setTimeout(retry, 0);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}