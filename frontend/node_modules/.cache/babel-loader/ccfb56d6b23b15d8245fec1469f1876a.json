{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\shonh\\\\Desktop\\\\VisualCode\\\\WebDevClub\\\\RecruitmentDay\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\shonh\\\\Desktop\\\\VisualCode\\\\WebDevClub\\\\RecruitmentDay\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = highlight;\nexports.getChalk = getChalk;\nexports.shouldHighlight = shouldHighlight;\n\nvar _jsTokens = require(\"js-tokens\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nvar _chalk = require(\"chalk\");\n\nvar sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\nfunction getDefs(chalk) {\n  return {\n    keyword: chalk.cyan,\n    capitalized: chalk.yellow,\n    jsxIdentifier: chalk.yellow,\n    punctuator: chalk.yellow,\n    number: chalk.magenta,\n    string: chalk.green,\n    regex: chalk.magenta,\n    comment: chalk.grey,\n    invalid: chalk.white.bgRed.bold\n  };\n}\n\nvar NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nvar BRACKET = /^[()[\\]{}]$/;\nvar tokenize;\n{\n  var JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  var getTokenType = function getTokenType(token, offset, text) {\n    if (token.type === \"name\") {\n      if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {\n        return \"keyword\";\n      }\n\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.substr(offset - 2, 2) == \"</\")) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = /*#__PURE__*/_regeneratorRuntime.mark(function tokenize(text) {\n    var match, token;\n    return _regeneratorRuntime.wrap(function tokenize$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(match = _jsTokens[\"default\"].exec(text))) {\n              _context.next = 6;\n              break;\n            }\n\n            token = _jsTokens.matchToToken(match);\n            _context.next = 4;\n            return {\n              type: getTokenType(token, match.index, text),\n              value: token.value\n            };\n\n          case 4:\n            _context.next = 0;\n            break;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, tokenize);\n  });\n}\n\nfunction highlightTokens(defs, text) {\n  var highlighted = \"\";\n\n  var _iterator = _createForOfIteratorHelper(tokenize(text)),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var _step$value = _step.value,\n          type = _step$value.type,\n          value = _step$value.value;\n      var colorize = defs[type];\n\n      if (colorize) {\n        highlighted += value.split(NEWLINE).map(function (str) {\n          return colorize(str);\n        }).join(\"\\n\");\n      } else {\n        highlighted += value;\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return highlighted;\n}\n\nfunction shouldHighlight(options) {\n  return !!_chalk.supportsColor || options.forceColor;\n}\n\nfunction getChalk(options) {\n  return options.forceColor ? new _chalk.constructor({\n    enabled: true,\n    level: 1\n  }) : _chalk;\n}\n\nfunction highlight(code) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (shouldHighlight(options)) {\n    var chalk = getChalk(options);\n    var defs = getDefs(chalk);\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}