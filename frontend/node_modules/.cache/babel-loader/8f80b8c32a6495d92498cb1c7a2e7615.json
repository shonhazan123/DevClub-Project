{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports[\"default\"] = deepCyclicCopy;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar EMPTY = new Set(); // Node 6 does not have gOPDs, so we define a simple polyfill for it.\n\nif (!Object.getOwnPropertyDescriptors) {\n  // @ts-ignore: polyfill\n  Object.getOwnPropertyDescriptors = function (obj) {\n    var list = {};\n    Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)).forEach(function (key) {\n      // @ts-ignore: assignment with a Symbol is OK.\n      list[key] = Object.getOwnPropertyDescriptor(obj, key);\n    });\n    return list;\n  };\n}\n\nfunction deepCyclicCopy(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    blacklist: EMPTY,\n    keepPrototype: false\n  };\n  var cycles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new WeakMap();\n\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  } else if (cycles.has(value)) {\n    return cycles.get(value);\n  } else if (Array.isArray(value)) {\n    return deepCyclicCopyArray(value, options, cycles);\n  } else {\n    return deepCyclicCopyObject(value, options, cycles);\n  }\n}\n\nfunction deepCyclicCopyObject(object, options, cycles) {\n  var newObject = options.keepPrototype ? Object.create(Object.getPrototypeOf(object)) : {};\n  var descriptors = Object.getOwnPropertyDescriptors(object);\n  cycles.set(object, newObject);\n  Object.keys(descriptors).forEach(function (key) {\n    if (options.blacklist && options.blacklist.has(key)) {\n      delete descriptors[key];\n      return;\n    }\n\n    var descriptor = descriptors[key];\n\n    if (typeof descriptor.value !== 'undefined') {\n      descriptor.value = deepCyclicCopy(descriptor.value, {\n        blacklist: EMPTY,\n        keepPrototype: options.keepPrototype\n      }, cycles);\n    }\n\n    descriptor.configurable = true;\n  });\n  return Object.defineProperties(newObject, descriptors);\n}\n\nfunction deepCyclicCopyArray(array, options, cycles) {\n  var newArray = options.keepPrototype ? new (Object.getPrototypeOf(array).constructor)(array.length) : [];\n  var length = array.length;\n  cycles.set(array, newArray);\n\n  for (var i = 0; i < length; i++) {\n    newArray[i] = deepCyclicCopy(array[i], {\n      blacklist: EMPTY,\n      keepPrototype: options.keepPrototype\n    }, cycles);\n  }\n\n  return newArray;\n}","map":null,"metadata":{},"sourceType":"script"}