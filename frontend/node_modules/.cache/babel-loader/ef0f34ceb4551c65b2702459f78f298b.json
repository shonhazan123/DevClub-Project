{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\shonh\\\\Desktop\\\\VisualCode\\\\WebDevClub\\\\RecruitmentDay\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\shonh\\\\Desktop\\\\VisualCode\\\\WebDevClub\\\\RecruitmentDay\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\shonh\\\\Desktop\\\\VisualCode\\\\WebDevClub\\\\RecruitmentDay\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:\\\\Users\\\\shonh\\\\Desktop\\\\VisualCode\\\\WebDevClub\\\\RecruitmentDay\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\shonh\\\\Desktop\\\\VisualCode\\\\WebDevClub\\\\RecruitmentDay\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require('assert'));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  var data = require('console');\n\n  _console = function _console() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _util() {\n  var data = require('util');\n\n  _util = function _util() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sourceMap() {\n  var data = require('@jest/source-map');\n\n  _sourceMap = function _sourceMap() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar BufferedConsole = /*#__PURE__*/function (_console$Console) {\n  _inherits(BufferedConsole, _console$Console);\n\n  var _super = _createSuper(BufferedConsole);\n\n  function BufferedConsole(getSourceMaps) {\n    var _this;\n\n    _classCallCheck(this, BufferedConsole);\n\n    var buffer = [];\n    _this = _super.call(this, {\n      write: function write(message) {\n        BufferedConsole.write(buffer, 'log', message, null, getSourceMaps());\n        return true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), '_buffer', void 0);\n\n    _defineProperty(_assertThisInitialized(_this), '_counters', void 0);\n\n    _defineProperty(_assertThisInitialized(_this), '_timers', void 0);\n\n    _defineProperty(_assertThisInitialized(_this), '_groupDepth', void 0);\n\n    _defineProperty(_assertThisInitialized(_this), '_getSourceMaps', void 0);\n\n    _this._getSourceMaps = getSourceMaps;\n    _this._buffer = buffer;\n    _this._counters = {};\n    _this._timers = {};\n    _this._groupDepth = 0;\n    return _this;\n  }\n\n  _createClass(BufferedConsole, [{\n    key: \"_log\",\n    value: function _log(type, message) {\n      BufferedConsole.write(this._buffer, type, '  '.repeat(this._groupDepth) + message, 3, this._getSourceMaps());\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(value, message) {\n      try {\n        (0, _assert()[\"default\"])(value, message);\n      } catch (error) {\n        this._log('assert', error.toString());\n      }\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\n      if (!this._counters[label]) {\n        this._counters[label] = 0;\n      }\n\n      this._log('count', (0, _util().format)(\"\".concat(label, \": \").concat(++this._counters[label])));\n    }\n  }, {\n    key: \"countReset\",\n    value: function countReset() {\n      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n      this._counters[label] = 0;\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(firstArg) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n\n      this._log('debug', (0, _util().format).apply(void 0, [firstArg].concat(rest)));\n    }\n  }, {\n    key: \"dir\",\n    value: function dir(firstArg) {\n      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        rest[_key2 - 1] = arguments[_key2];\n      }\n\n      this._log('dir', (0, _util().format).apply(void 0, [firstArg].concat(rest)));\n    }\n  }, {\n    key: \"dirxml\",\n    value: function dirxml(firstArg) {\n      for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        rest[_key3 - 1] = arguments[_key3];\n      }\n\n      this._log('dirxml', (0, _util().format).apply(void 0, [firstArg].concat(rest)));\n    }\n  }, {\n    key: \"error\",\n    value: function error(firstArg) {\n      for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        rest[_key4 - 1] = arguments[_key4];\n      }\n\n      this._log('error', (0, _util().format).apply(void 0, [firstArg].concat(rest)));\n    }\n  }, {\n    key: \"group\",\n    value: function group(title) {\n      this._groupDepth++;\n\n      for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        rest[_key5 - 1] = arguments[_key5];\n      }\n\n      if (title || rest.length > 0) {\n        this._log('group', _chalk()[\"default\"].bold((0, _util().format).apply(void 0, [title].concat(rest))));\n      }\n    }\n  }, {\n    key: \"groupCollapsed\",\n    value: function groupCollapsed(title) {\n      this._groupDepth++;\n\n      for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        rest[_key6 - 1] = arguments[_key6];\n      }\n\n      if (title || rest.length > 0) {\n        this._log('groupCollapsed', _chalk()[\"default\"].bold((0, _util().format).apply(void 0, [title].concat(rest))));\n      }\n    }\n  }, {\n    key: \"groupEnd\",\n    value: function groupEnd() {\n      if (this._groupDepth > 0) {\n        this._groupDepth--;\n      }\n    }\n  }, {\n    key: \"info\",\n    value: function info(firstArg) {\n      for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        rest[_key7 - 1] = arguments[_key7];\n      }\n\n      this._log('info', (0, _util().format).apply(void 0, [firstArg].concat(rest)));\n    }\n  }, {\n    key: \"log\",\n    value: function log(firstArg) {\n      for (var _len8 = arguments.length, rest = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        rest[_key8 - 1] = arguments[_key8];\n      }\n\n      this._log('log', (0, _util().format).apply(void 0, [firstArg].concat(rest)));\n    }\n  }, {\n    key: \"time\",\n    value: function time() {\n      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\n      if (this._timers[label]) {\n        return;\n      }\n\n      this._timers[label] = new Date();\n    }\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd() {\n      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n      var startTime = this._timers[label];\n\n      if (startTime) {\n        var endTime = new Date();\n        var time = endTime.getTime() - startTime.getTime();\n\n        this._log('time', (0, _util().format)(\"\".concat(label, \": \").concat(time, \"ms\")));\n\n        delete this._timers[label];\n      }\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(firstArg) {\n      for (var _len9 = arguments.length, rest = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n        rest[_key9 - 1] = arguments[_key9];\n      }\n\n      this._log('warn', (0, _util().format).apply(void 0, [firstArg].concat(rest)));\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      return this._buffer.length ? this._buffer : undefined;\n    }\n  }], [{\n    key: \"write\",\n    value: function write(buffer, type, message, level, sourceMaps) {\n      var callsite = (0, _sourceMap().getCallsite)(level != null ? level : 2, sourceMaps);\n      var origin = callsite.getFileName() + ':' + callsite.getLineNumber();\n      buffer.push({\n        message: message,\n        origin: origin,\n        type: type\n      });\n      return buffer;\n    }\n  }]);\n\n  return BufferedConsole;\n}(_console().Console);\n\nexports[\"default\"] = BufferedConsole;","map":null,"metadata":{},"sourceType":"script"}