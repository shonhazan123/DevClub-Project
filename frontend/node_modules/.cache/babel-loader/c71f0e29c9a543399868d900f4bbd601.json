{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'Frame', {\n  enumerable: true,\n  get: function get() {\n    return _types.Frame;\n  }\n});\nexports.separateMessageFromStack = exports.formatResultsErrors = exports.formatStackTrace = exports.getTopFrame = exports.getStackTraceLines = exports.formatExecError = void 0;\n\nvar _fs = _interopRequireDefault(require('fs'));\n\nvar _path = _interopRequireDefault(require('path'));\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _micromatch = _interopRequireDefault(require('micromatch'));\n\nvar _slash = _interopRequireDefault(require('slash'));\n\nvar _codeFrame = require('@babel/code-frame');\n\nvar _stackUtils = _interopRequireDefault(require('stack-utils'));\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\n\nvar jestReadFile = global[Symbol[\"for\"]('jest-native-read-file')] || _fs[\"default\"].readFileSync;\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol; // stack utils tries to create pretty stack by making paths relative.\n\nvar stackUtils = new _stackUtils[\"default\"]({\n  cwd: 'something which does not exist'\n});\nvar nodeInternals = [];\n\ntry {\n  nodeInternals = _stackUtils[\"default\"].nodeInternals();\n} catch (e) {// `StackUtils.nodeInternals()` fails in browsers. We don't need to remove\n  // node internals in the browser though, so no issue.\n}\n\nvar PATH_NODE_MODULES = \"\".concat(_path[\"default\"].sep, \"node_modules\").concat(_path[\"default\"].sep);\nvar PATH_JEST_PACKAGES = \"\".concat(_path[\"default\"].sep, \"jest\").concat(_path[\"default\"].sep, \"packages\").concat(_path[\"default\"].sep); // filter for noisy stack trace lines\n\nvar JASMINE_IGNORE = /^\\s+at(?:(?:.jasmine\\-)|\\s+jasmine\\.buildExpectationResult)/;\nvar JEST_INTERNALS_IGNORE = /^\\s+at.*?jest(-.*?)?(\\/|\\\\)(build|node_modules|packages)(\\/|\\\\)/;\nvar ANONYMOUS_FN_IGNORE = /^\\s+at <anonymous>.*$/;\nvar ANONYMOUS_PROMISE_IGNORE = /^\\s+at (new )?Promise \\(<anonymous>\\).*$/;\nvar ANONYMOUS_GENERATOR_IGNORE = /^\\s+at Generator.next \\(<anonymous>\\).*$/;\nvar NATIVE_NEXT_IGNORE = /^\\s+at next \\(native\\).*$/;\nvar TITLE_INDENT = '  ';\nvar MESSAGE_INDENT = '    ';\nvar STACK_INDENT = '      ';\nvar ANCESTRY_SEPARATOR = \" \\u203A \";\n\nvar TITLE_BULLET = _chalk[\"default\"].bold(\"\\u25CF \");\n\nvar STACK_TRACE_COLOR = _chalk[\"default\"].dim;\nvar STACK_PATH_REGEXP = /\\s*at.*\\(?(\\:\\d*\\:\\d*|native)\\)?/;\nvar EXEC_ERROR_MESSAGE = 'Test suite failed to run';\nvar NOT_EMPTY_LINE_REGEXP = /^(?!$)/gm;\n\nvar indentAllLines = function indentAllLines(lines, indent) {\n  return lines.replace(NOT_EMPTY_LINE_REGEXP, indent);\n};\n\nvar trim = function trim(string) {\n  return (string || '').trim();\n}; // Some errors contain not only line numbers in stack traces\n// e.g. SyntaxErrors can contain snippets of code, and we don't\n// want to trim those, because they may have pointers to the column/character\n// which will get misaligned.\n\n\nvar trimPaths = function trimPaths(string) {\n  return string.match(STACK_PATH_REGEXP) ? trim(string) : string;\n};\n\nvar getRenderedCallsite = function getRenderedCallsite(fileContent, line, column) {\n  var renderedCallsite = (0, _codeFrame.codeFrameColumns)(fileContent, {\n    start: {\n      column: column,\n      line: line\n    }\n  }, {\n    highlightCode: true\n  });\n  renderedCallsite = indentAllLines(renderedCallsite, MESSAGE_INDENT);\n  renderedCallsite = \"\\n\".concat(renderedCallsite, \"\\n\");\n  return renderedCallsite;\n};\n\nvar blankStringRegexp = /^\\s*$/; // ExecError is an error thrown outside of the test suite (not inside an `it` or\n// `before/after each` hooks). If it's thrown, none of the tests in the file\n// are executed.\n\nvar formatExecError = function formatExecError(error, config, options, testPath, reuseMessage) {\n  if (!error || typeof error === 'number') {\n    error = new Error(\"Expected an Error, but \\\"\".concat(String(error), \"\\\" was thrown\"));\n    error.stack = '';\n  }\n\n  var message, stack;\n\n  if (typeof error === 'string' || !error) {\n    error || (error = 'EMPTY ERROR');\n    message = '';\n    stack = error;\n  } else {\n    message = error.message;\n    stack = error.stack;\n  }\n\n  var separated = separateMessageFromStack(stack || '');\n  stack = separated.stack;\n\n  if (separated.message.includes(trim(message))) {\n    // Often stack trace already contains the duplicate of the message\n    message = separated.message;\n  }\n\n  message = indentAllLines(message, MESSAGE_INDENT);\n  stack = stack && !options.noStackTrace ? '\\n' + formatStackTrace(stack, config, options, testPath) : '';\n\n  if (blankStringRegexp.test(message) && blankStringRegexp.test(stack)) {\n    // this can happen if an empty object is thrown.\n    message = MESSAGE_INDENT + 'Error: No message was provided';\n  }\n\n  var messageToUse;\n\n  if (reuseMessage) {\n    messageToUse = \" \".concat(message.trim());\n  } else {\n    messageToUse = \"\".concat(EXEC_ERROR_MESSAGE, \"\\n\\n\").concat(message);\n  }\n\n  return TITLE_INDENT + TITLE_BULLET + messageToUse + stack + '\\n';\n};\n\nexports.formatExecError = formatExecError;\n\nvar removeInternalStackEntries = function removeInternalStackEntries(lines, options) {\n  var pathCounter = 0;\n  return lines.filter(function (line) {\n    if (ANONYMOUS_FN_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (ANONYMOUS_PROMISE_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (ANONYMOUS_GENERATOR_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (NATIVE_NEXT_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (nodeInternals.some(function (internal) {\n      return internal.test(line);\n    })) {\n      return false;\n    }\n\n    if (!STACK_PATH_REGEXP.test(line)) {\n      return true;\n    }\n\n    if (JASMINE_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (++pathCounter === 1) {\n      return true; // always keep the first line even if it's from Jest\n    }\n\n    if (options.noStackTrace) {\n      return false;\n    }\n\n    if (JEST_INTERNALS_IGNORE.test(line)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nvar formatPaths = function formatPaths(config, relativeTestPath, line) {\n  // Extract the file path from the trace line.\n  var match = line.match(/(^\\s*at .*?\\(?)([^()]+)(:[0-9]+:[0-9]+\\)?.*$)/);\n\n  if (!match) {\n    return line;\n  }\n\n  var filePath = (0, _slash[\"default\"])(_path[\"default\"].relative(config.rootDir, match[2])); // highlight paths from the current test file\n\n  if (config.testMatch && config.testMatch.length && _micromatch[\"default\"].some(filePath, config.testMatch) || filePath === relativeTestPath) {\n    filePath = _chalk[\"default\"].reset.cyan(filePath);\n  }\n\n  return STACK_TRACE_COLOR(match[1]) + filePath + STACK_TRACE_COLOR(match[3]);\n};\n\nvar getStackTraceLines = function getStackTraceLines(stack) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    noStackTrace: false\n  };\n  return removeInternalStackEntries(stack.split(/\\n/), options);\n};\n\nexports.getStackTraceLines = getStackTraceLines;\n\nvar getTopFrame = function getTopFrame(lines) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var line = _step.value;\n\n      if (line.includes(PATH_NODE_MODULES) || line.includes(PATH_JEST_PACKAGES)) {\n        continue;\n      }\n\n      var parsedFrame = stackUtils.parseLine(line.trim());\n\n      if (parsedFrame && parsedFrame.file) {\n        return parsedFrame;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n};\n\nexports.getTopFrame = getTopFrame;\n\nvar formatStackTrace = function formatStackTrace(stack, config, options, testPath) {\n  var lines = getStackTraceLines(stack, options);\n  var topFrame = getTopFrame(lines);\n  var renderedCallsite = '';\n  var relativeTestPath = testPath ? (0, _slash[\"default\"])(_path[\"default\"].relative(config.rootDir, testPath)) : null;\n\n  if (topFrame) {\n    var column = topFrame.column,\n        filename = topFrame.file,\n        line = topFrame.line;\n\n    if (line && filename && _path[\"default\"].isAbsolute(filename)) {\n      var fileContent;\n\n      try {\n        // TODO: check & read HasteFS instead of reading the filesystem:\n        // see: https://github.com/facebook/jest/pull/5405#discussion_r164281696\n        fileContent = jestReadFile(filename, 'utf8');\n        renderedCallsite = getRenderedCallsite(fileContent, line, column);\n      } catch (e) {// the file does not exist or is inaccessible, we ignore\n      }\n    }\n  }\n\n  var stacktrace = lines.filter(Boolean).map(function (line) {\n    return STACK_INDENT + formatPaths(config, relativeTestPath, trimPaths(line));\n  }).join('\\n');\n  return \"\".concat(renderedCallsite, \"\\n\").concat(stacktrace);\n};\n\nexports.formatStackTrace = formatStackTrace;\n\nvar formatResultsErrors = function formatResultsErrors(testResults, config, options, testPath) {\n  var failedResults = testResults.reduce(function (errors, result) {\n    result.failureMessages.forEach(function (content) {\n      return errors.push({\n        content: content,\n        result: result\n      });\n    });\n    return errors;\n  }, []);\n\n  if (!failedResults.length) {\n    return null;\n  }\n\n  return failedResults.map(function (_ref) {\n    var result = _ref.result,\n        content = _ref.content;\n\n    var _separateMessageFromS = separateMessageFromStack(content),\n        message = _separateMessageFromS.message,\n        stack = _separateMessageFromS.stack;\n\n    stack = options.noStackTrace ? '' : STACK_TRACE_COLOR(formatStackTrace(stack, config, options, testPath)) + '\\n';\n    message = indentAllLines(message, MESSAGE_INDENT);\n    var title = _chalk[\"default\"].bold.red(TITLE_INDENT + TITLE_BULLET + result.ancestorTitles.join(ANCESTRY_SEPARATOR) + (result.ancestorTitles.length ? ANCESTRY_SEPARATOR : '') + result.title) + '\\n';\n    return title + '\\n' + message + '\\n' + stack;\n  }).join('\\n');\n};\n\nexports.formatResultsErrors = formatResultsErrors;\nvar errorRegexp = /^Error:?\\s*$/;\n\nvar removeBlankErrorLine = function removeBlankErrorLine(str) {\n  return str.split('\\n') // Lines saying just `Error:` are useless\n  .filter(function (line) {\n    return !errorRegexp.test(line);\n  }).join('\\n').trimRight();\n}; // jasmine and worker farm sometimes don't give us access to the actual\n// Error object, so we have to regexp out the message from the stack string\n// to format it.\n\n\nvar separateMessageFromStack = function separateMessageFromStack(content) {\n  if (!content) {\n    return {\n      message: '',\n      stack: ''\n    };\n  } // All lines up to what looks like a stack -- or if nothing looks like a stack\n  // (maybe it's a code frame instead), just the first non-empty line.\n  // If the error is a plain \"Error:\" instead of a SyntaxError or TypeError we\n  // remove the prefix from the message because it is generally not useful.\n\n\n  var messageMatch = content.match(/^(?:Error: )?([\\s\\S]*?(?=\\n\\s*at\\s.*:\\d*:\\d*)|\\s*.*)([\\s\\S]*)$/);\n\n  if (!messageMatch) {\n    // For typescript\n    throw new Error('If you hit this error, the regex above is buggy.');\n  }\n\n  var message = removeBlankErrorLine(messageMatch[1]);\n  var stack = removeBlankErrorLine(messageMatch[2]);\n  return {\n    message: message,\n    stack: stack\n  };\n};\n\nexports.separateMessageFromStack = separateMessageFromStack;","map":null,"metadata":{},"sourceType":"script"}